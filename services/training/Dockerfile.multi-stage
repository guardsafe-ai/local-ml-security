# Multi-stage Dockerfile with CUDA support and CPU fallback
# Stage 1: CUDA-enabled base (if available)
FROM nvidia/cuda:12.2-devel-ubuntu22.04 AS cuda-base
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# Install Python and system dependencies
RUN apt-get update && apt-get install -y \
    python3.9 \
    python3.9-dev \
    python3-pip \
    gcc \
    g++ \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create symlink for python
RUN ln -s /usr/bin/python3.9 /usr/bin/python

WORKDIR /app

# Copy requirements and install PyTorch with CUDA support
COPY requirements.txt .
RUN pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
RUN pip install -r requirements.txt

# Stage 2: CPU-only fallback
FROM python:3.9-slim AS cpu-base
ENV DEBIAN_FRONTEND=noninteractive

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install CPU-only PyTorch
COPY requirements.txt .
RUN pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
RUN pip install -r requirements.txt

# Stage 3: Final image - try CUDA first, fallback to CPU
FROM cuda-base AS final

# Copy application code
COPY . .

# Set environment variables for device detection
ENV CUDA_VISIBLE_DEVICES=all
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512

# Create a startup script that detects CUDA availability
RUN echo '#!/bin/bash\n\
echo "🔍 Detecting CUDA availability..."\n\
python -c "import torch; print(f\"CUDA available: {torch.cuda.is_available()}\")"\n\
if python -c "import torch; exit(0 if torch.cuda.is_available() else 1)"; then\n\
    echo "✅ CUDA detected, using GPU acceleration"\n\
else\n\
    echo "⚠️ CUDA not available, falling back to CPU"\n\
    echo "ℹ️ This is normal on ARM64/Apple Silicon systems"\n\
fi\n\
echo "🚀 Starting training service..."\n\
exec "$@"' > /app/start.sh && chmod +x /app/start.sh

# Use the startup script as entrypoint
ENTRYPOINT ["/app/start.sh"]
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8002"]
